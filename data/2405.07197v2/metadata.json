{
  "doi": "2405.07197v2",
  "content": [
    {
      "type": "text",
      "text": "Mu-Te Lau*†, Chin-Yi Cheng*†, Cheng-Hua Lu*‡, Chia-Hsu Chuang*†,  \nYi-Hsiang Kuo†, Hsiang-Chun Yang†, Chien-Tung Kuo†, Hsin-Yu Chen†, Chen-Ying Tung†, Cheng-En Tsai†,  \nGuan-Hao Chen†, Leng-Kai Lin†, Ching-Huan Wang†, Tzu-Hsu Wang†, Chung-Yang Ric Huang†\n\n†National Taiwan University, R.O.C., ‡Stanford University, U.S.  \njosh.lau2011@gmail.com, chin-yi.cheng@utexas.edu, cyhuang@ntu.edu.tw\n\n_Abstract—In this paper, we introduce Qsyn, a novel quantum circuit synthesis (QCS) framework designed to facilitate the research, development, testing, and experimentation of QCS algorithms and tools. Our framework is more developer-friendly than other modern QCS frameworks in three aspects: (1) Qsyn provides a comprehensive command-line interface that enables developers to design various testing scenarios with ease and conduct flexible experiments on their algorithms. This feature significantly streamlines the development process, making it more efficient and user-friendly. (2) Qsyn offers detailed access to multiple data representations at different abstraction levels of quantum circuits. This capability allows developers to optimize their algorithms extensively, gaining deeper insights and control over the structure and behavior of quantum circuits. By understanding the intricacies of circuit design, developers can achieve higher levels of optimization and performance in their algorithms. (3) Qsyn implements a rigorous development flow and environment to help developers maintain high-quality standards using modern software engineering practices, including robust quality assurance measures like regression testing, continuous integration and continuous delivery (CI/CD) pipelines, and code linting. We demonstrate Qsyn’s superior performance through fair comparisons with PyZX [1], highlighting its efficiency and optimization capabilities. By providing a unified and user-friendly development environment, Qsyn empowers researchers and developers to prototype, implement, and evaluate their QCS algorithms effectively._\n\n_Index Terms—Quantum Computing, Quantum Systems Software, Quantum Software Engineering_\n\nTo push the advancement of the quantum circuit synthesis (QCS) algorithms in the future, we need a framework that offers a friendly environment for more QCS algorithm/tool developers to easily contribute their advanced ideas and conduct thorough experiments. As a result, we have open-sourced Qsyn, a developer-friendly QCS framework, to aid further development in this field. Our main contributions are:\n\nWith Qsyn, developers can easily accelerate the implementation and evaluation of new QCS algorithms by leveraging the provided data structures and development environments.\n\nQsyn embodies end-to-end synthesis by invoking functionalities for each synthesis stage as commands. It is designed with extensibility in mind, leveraging a data-oriented approach that focuses on robust data management and manipulation capabilities. Below, we introduce the core functionalities in Qsyn (https://github.com/DVLab-NTU/qsyn) for QCS.\n\nFor ZX-based methods, Qsyn has implementation advantages over PyZX. Qsyn revises the original algorithms in two aspects: (1) adopt a more compact ZX-diagram representation for MCT gates and an early-stopping strategy to avoid producing redundant graph complexity [11] (2) improves the conversion routine from ZX-diagrams to circuits. Specifically, the \"gadget removal\" strategy during conversion was improved to extract fewer CZ gates, contributing to a more compacted quantum circuit.\n\nOn the other hand, tableau, another data structure in Qsyn, represents Pauli rotation and phase polynomial which is used in QCS approaches. This representation unification eliminates\n\nThis work is supported by the National Science and Technology Council R.O.C., Project No.: NSTC 113-2119-M-002-024."
    },
    {
      "type": "text",
      "text": "frequent data conversions required when switching between these two synthesis paradigms.\n\nQsyn offers a variety of capabilities that facilitate users’ expanding of Qsyn for their own algorithms and applications. The extension is initiated with the design of the usage flow based on Qsyn’s command-line interface (CLI), which processes user inputs and handles command execution. Then with the key capabilities described below, Qsyn provides a robust and adaptable framework for quantum circuit synthesis:\n\nQsyn offers an extensible and highly expressive quantum circuit model. In addition to fundamental gate types, it allows developers to freely add new types of quantum gates. This capability enables developers and researchers to combine a wide range of quantum operations, simplifying the management of these complex tasks.\n\nDevelopers can integrate Qsyn with external quantum synthesis tools, enhancing workflow flexibility through employing scripts. This shell interoperability becomes particularly useful when comparing optimization results between Qsyn and other synthesis tools.\n\nOne of Qsyn’s main missions is to assist developers in creating and assessing new synthesis algorithms. This is made possible by its powerful and easy-to-maintain argument parser along with its useful CLI utilities.\n\nWe compare Qsyn’s efficiency and optimization power with PyZX [1]. In Table I, we performed gate-level synthesis to examine the run time and memory usage of Qsyn against PyZX.\n\nCompared to PyZX, Qsyn tended to optimize circuits with shorter program runtimes and lower memory usage. This distinction was particularly notable in circuits such as gf2^128, hwb12, and urf4, where PyZX encounters TLE and/or MLE (Time/Memory Limit Exceeded). For circuit statistics, Qsyn achieved either smaller or equal RZ-counts and, on average, shallower circuits. This is attributed to Qsyn’s integration of ZX-calculus and Tableau combined methods, further compressing rotation counts.\n\nCOMPARISON WITH PYZX [1] ON THE GATE-LEVEL SYNTHESIS STAGE\nTIME UNIT: s, MEMORY UNIT: MiB\n\nThis work is supported by the National Science and Technology Council, R.O.C., Project No.: NSTC 113-2119-M-002-024."
    }
  ],
  "images": [],
  "pdf": "2405.07197v2_err1.pdf"
}